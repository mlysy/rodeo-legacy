print(result)
m1
fb$Length
fb <- read.csv("sharks.csv")
fb <- na.omit(fb)
m1 <- lm(Length~Age, data=fb)
createLeastSquaresRho <- function(x, y) {
## local variable
xbar <- mean(x)
## Return this function
function(theta) {
alpha <- theta[1]
beta <- theta[2]
sum((y - alpha - beta * (x - xbar))^2)
}
}
### We now get the rho function for the waldo data
rho <- createLeastSquaresRho(fb$Age, fb$Length)
### Similarly for the gradient function
createLeastSquaresGradient <- function(x, y) {
## local variables
xbar <- mean(x)
ybar <- mean(y)
N <- length(x)
function(theta) {
alpha <- theta[1]
beta <- theta[2]
-2 * c(sum(y - alpha - beta * (x - xbar)), sum((y - alpha - beta * (x -
xbar)) * (x - xbar)))
}
}
gradient <- createLeastSquaresGradient(fb$Age, fb$Length)
gradientDescent <- function(theta = 0, rhoFn, gradientFn, lineSearchFn, testConvergenceFn,
maxIterations = 1000, tolerance = 1e-06, relative = FALSE, lambdaStepsize = 0.01,
lambdaMax = 0.5) {
converged <- FALSE
i <- 0
while (!converged & i <= maxIterations) {
g <- gradientFn(theta) ## gradient
glength <- sqrt(sum(g^2)) ## gradient direction
if (glength > 0)
g <- g/glength
lambda <- lineSearchFn(theta, rhoFn, g, lambdaStepsize = lambdaStepsize,
lambdaMax = lambdaMax)
thetaNew <- theta - lambda * g
converged <- testConvergenceFn(thetaNew, theta, tolerance = tolerance,
relative = relative)
theta <- thetaNew
i <- i + 1
}
## Return last value and whether converged or not
list(theta = theta, converged = converged, iteration = i, fnValue = rhoFn(theta))
}
gridLineSearch <- function(theta, rhoFn, g, lambdaStepsize = 0.01, lambdaMax = 1) {
## grid of lambda values to search
lambdas <- seq(from = 0, by = lambdaStepsize, to = lambdaMax)
## line search
rhoVals <- sapply(lambdas, function(lambda) {
rhoFn(theta - lambda * g)
})
## Return the lambda that gave the minimum
lambdas[which.min(rhoVals)]
}
### Where testCovergence might be (relative or absolute)
testConvergence <- function(thetaNew, thetaOld, tolerance = 1e-10, relative = FALSE) {
sum(abs(thetaNew - thetaOld)) < if (relative)
tolerance * sum(abs(thetaOld)) else tolerance
}
result <- gradientDescent(theta = c(0, 0), rhoFn = rho, gradientFn = gradient,
lineSearchFn = gridLineSearch, testConvergenceFn = testConvergence)
print(result)
m1
fb <- read.csv("sharks.csv")
fb <- na.omit(fb)
m1 <- lm(Length~Age, data=fb)
createLeastSquaresRho <- function(x, y) {
## local variable
xbar <- mean(x)
## Return this function
function(theta) {
alpha <- theta[1]
beta <- theta[2]
sum((y - alpha - beta * (x - xbar))^2)
}
}
### We now get the rho function for the waldo data
rho <- createLeastSquaresRho(fb$Age, fb$Length)
### Similarly for the gradient function
createLeastSquaresGradient <- function(x, y) {
## local variables
xbar <- mean(x)
ybar <- mean(y)
N <- length(x)
function(theta) {
alpha <- theta[1]
beta <- theta[2]
-2 * c(sum(y - alpha - beta * (x - xbar)), sum((y - alpha - beta * (x -
xbar)) * (x - xbar)))
}
}
gradient <- createLeastSquaresGradient(fb$Age, fb$Length)
gradientDescent <- function(theta = 0, rhoFn, gradientFn, lineSearchFn, testConvergenceFn,
maxIterations = 10000, tolerance = 1e-06, relative = FALSE, lambdaStepsize = 0.01,
lambdaMax = 0.5) {
converged <- FALSE
i <- 0
while (!converged & i <= maxIterations) {
g <- gradientFn(theta) ## gradient
glength <- sqrt(sum(g^2)) ## gradient direction
if (glength > 0)
g <- g/glength
lambda <- lineSearchFn(theta, rhoFn, g, lambdaStepsize = lambdaStepsize,
lambdaMax = lambdaMax)
thetaNew <- theta - lambda * g
converged <- testConvergenceFn(thetaNew, theta, tolerance = tolerance,
relative = relative)
theta <- thetaNew
i <- i + 1
}
## Return last value and whether converged or not
list(theta = theta, converged = converged, iteration = i, fnValue = rhoFn(theta))
}
gridLineSearch <- function(theta, rhoFn, g, lambdaStepsize = 0.01, lambdaMax = 1) {
## grid of lambda values to search
lambdas <- seq(from = 0, by = lambdaStepsize, to = lambdaMax)
## line search
rhoVals <- sapply(lambdas, function(lambda) {
rhoFn(theta - lambda * g)
})
## Return the lambda that gave the minimum
lambdas[which.min(rhoVals)]
}
### Where testCovergence might be (relative or absolute)
testConvergence <- function(thetaNew, thetaOld, tolerance = 1e-10, relative = FALSE) {
sum(abs(thetaNew - thetaOld)) < if (relative)
tolerance * sum(abs(thetaOld)) else tolerance
}
result <- gradientDescent(theta = c(0, 0), rhoFn = rho, gradientFn = gradient,
lineSearchFn = gridLineSearch, testConvergenceFn = testConvergence)
print(result)
---
title:  "Q1"
author: "Mohan Wu"
output:
pdf_document: default
html_document: default
---
```{r setup, include = FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
```
```{r, include = FALSE}
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
```
## Q1
(a) Load the sharks dataset using `read.csv`.
**Solution**
```{r}
shark <- read.csv("sharks.csv")
```
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
l <- shark$Length
N <- len(shark$Length)
which.max(c(1,2,3))
which.max(c(3,1,2))
shark <- read.csv("sharks.csv")
shark[1]
shark[,1]
shark[:,1]
shark
shark[1,]
K <- 10
theta_true <- c(0.1, 0.7, 0.35, 0.2, 0.1, 0.9, 0.3, 0.1)
genemodelODE <- function(theta,x) {
RNA <- x[,1]
P <- x[,2]
Q <- x[,3]
DNA <- x[,4]
result <- array(0, c(nrow(x),ncol(x)))
result[,1] <- theta[3] *DNA - theta[7]*RNA
result[,2] <- 2*theta[6]*Q - theta[8]*P + theta[4]*RNA - theta[5]*P*(P-1)
result[,3] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
- theta[6]*Q + .5*theta[5]*P*(P-1)
result[,4] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
result
}
modelODE <- function(t, state, parameters) {
list(as.vector(genemodelODE(parameters, t(state))))
}
xtrue <- deSolve::ode(y = c(8,8,8,5), times = times, func = modelODE, parms = theta_true)
xtrue <- data.frame(xtrue)
compnames <- c("RNA", "P","Q", "DNA")
ylim_lower <- c(0, 1,1,1)
ylim_upper <- c(12, 17,12,10)
par(mfrow=c(2,2), mar=c(4,2,1,1))
for (i in 1:4) {
plot(times, gene_data[,i+1],xlab="time", ylab="", ylim=c(ylim_lower[i], ylim_upper[i]))
mtext(compnames[i])
lines(times, xtrue[,i + 1], lwd=1,col = 'red')
}
#gene_data <- gene_data[seq(from = 1, to = dim(gene_data)[1], length.out = 100),]
times <- seq(0, 50, 101)
#gene_data <- gene_data[seq(from = 1, to = dim(gene_data)[1], length.out = 100),]
times <- seq(0, 50, 101)
K <- 10
theta_true <- c(0.1, 0.7, 0.35, 0.2, 0.1, 0.9, 0.3, 0.1)
genemodelODE <- function(theta,x) {
RNA <- x[,1]
P <- x[,2]
Q <- x[,3]
DNA <- x[,4]
result <- array(0, c(nrow(x),ncol(x)))
result[,1] <- theta[3] *DNA - theta[7]*RNA
result[,2] <- 2*theta[6]*Q - theta[8]*P + theta[4]*RNA - theta[5]*P*(P-1)
result[,3] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
- theta[6]*Q + .5*theta[5]*P*(P-1)
result[,4] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
result
}
modelODE <- function(t, state, parameters) {
list(as.vector(genemodelODE(parameters, t(state))))
}
xtrue <- deSolve::ode(y = c(8,8,8,5), times = times, func = modelODE, parms = theta_true)
xtrue <- data.frame(xtrue)
compnames <- c("RNA", "P","Q", "DNA")
ylim_lower <- c(0, 1,1,1)
ylim_upper <- c(12, 17,12,10)
par(mfrow=c(2,2), mar=c(4,2,1,1))
for (i in 1:4) {
plot(times, gene_data[,i+1],xlab="time", ylab="", ylim=c(ylim_lower[i], ylim_upper[i]))
mtext(compnames[i])
lines(times, xtrue[,i + 1], lwd=1,col = 'red')
}
xtrue <- deSolve::ode(y = c(8,8,8,5), times = times, func = modelODE, parms = theta_true)
xtrue <- data.frame(xtrue)
gene_data <- read.csv("gene_autoreg_SDE_50.csv")
dim(gene_data)[1]
setwd("~/rodeo/tests/jax")
gene_data <- read.csv("gene_autoreg_SDE_50.csv")
dim(gene_data)[1]
gene_data <- gene_data[seq(from = 0, to = dim(gene_data)[1], length.out = 101),]
times <- seq(0, 50, 101)
K <- 10
theta_true <- c(0.1, 0.7, 0.35, 0.2, 0.1, 0.9, 0.3, 0.1)
genemodelODE <- function(theta,x) {
RNA <- x[,1]
P <- x[,2]
Q <- x[,3]
DNA <- x[,4]
result <- array(0, c(nrow(x),ncol(x)))
result[,1] <- theta[3] *DNA - theta[7]*RNA
result[,2] <- 2*theta[6]*Q - theta[8]*P + theta[4]*RNA - theta[5]*P*(P-1)
result[,3] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
- theta[6]*Q + .5*theta[5]*P*(P-1)
result[,4] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
result
}
modelODE <- function(t, state, parameters) {
list(as.vector(genemodelODE(parameters, t(state))))
}
xtrue <- deSolve::ode(y = c(8,8,8,5), times = times, func = modelODE, parms = theta_true)
times <- gene_data[,1]
K <- 10
theta_true <- c(0.1, 0.7, 0.35, 0.2, 0.1, 0.9, 0.3, 0.1)
genemodelODE <- function(theta,x) {
RNA <- x[,1]
P <- x[,2]
Q <- x[,3]
DNA <- x[,4]
result <- array(0, c(nrow(x),ncol(x)))
result[,1] <- theta[3] *DNA - theta[7]*RNA
result[,2] <- 2*theta[6]*Q - theta[8]*P + theta[4]*RNA - theta[5]*P*(P-1)
result[,3] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
- theta[6]*Q + .5*theta[5]*P*(P-1)
result[,4] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
result
}
modelODE <- function(t, state, parameters) {
list(as.vector(genemodelODE(parameters, t(state))))
}
xtrue <- deSolve::ode(y = c(8,8,8,5), times = times, func = modelODE, parms = theta_true)
xtrue <- data.frame(xtrue)
compnames <- c("RNA", "P","Q", "DNA")
ylim_lower <- c(0, 1,1,1)
ylim_upper <- c(12, 17,12,10)
par(mfrow=c(2,2), mar=c(4,2,1,1))
for (i in 1:4) {
plot(times, gene_data[,i+1],xlab="time", ylab="", ylim=c(ylim_lower[i], ylim_upper[i]))
mtext(compnames[i])
lines(times, xtrue[,i + 1], lwd=1,col = 'red')
}
xtrue
genemodelODE(theta, c(8,8,8,5))
K <- 10
theta_true <- c(0.1, 0.7, 0.35, 0.2, 0.1, 0.9, 0.3, 0.1)
genemodelODE <- function(theta,x) {
RNA <- x[1]
P <- x[2]
Q <- x[3]
DNA <- x[4]
result <- array(0, c(nrow(x),ncol(x)))
result[,1] <- theta[3] *DNA - theta[7]*RNA
result[,2] <- 2*theta[6]*Q - theta[8]*P + theta[4]*RNA - theta[5]*P*(P-1)
result[,3] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
- theta[6]*Q + .5*theta[5]*P*(P-1)
result[,4] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
result
}
genemodelODE(theta, c(8,8,8,5))
K <- 10
theta_true <- c(0.1, 0.7, 0.35, 0.2, 0.1, 0.9, 0.3, 0.1)
genemodelODE <- function(theta,x) {
RNA <- x[1]
P <- x[2]
Q <- x[3]
DNA <- x[4]
result <- array(0, c(nrow(x),ncol(x)))
result[1] <- theta[3] *DNA - theta[7]*RNA
result[2] <- 2*theta[6]*Q - theta[8]*P + theta[4]*RNA - theta[5]*P*(P-1)
result[3] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
- theta[6]*Q + .5*theta[5]*P*(P-1)
result[4] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
resul
theta_true <- c(0.1, 0.7, 0.35, 0.2, 0.1, 0.9, 0.3, 0.1)
genemodelODE <- function(theta,x) {
RNA <- x[1]
P <- x[2]
Q <- x[3]
DNA <- x[4]
result <- array(0, c(nrow(x),ncol(x)))
result[1] <- theta[3] *DNA - theta[7]*RNA
result[2] <- 2*theta[6]*Q - theta[8]*P + theta[4]*RNA - theta[5]*P*(P-1)
result[3] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
- theta[6]*Q + .5*theta[5]*P*(P-1)
result[4] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
result
}
a
}
theta_true <- c(0.1, 0.7, 0.35, 0.2, 0.1, 0.9, 0.3, 0.1)
genemodelODE <- function(theta,x) {
RNA <- x[1]
P <- x[2]
Q <- x[3]
DNA <- x[4]
result <- array(0, c(nrow(x),ncol(x)))
result[1] <- theta[3] *DNA - theta[7]*RNA
result[2] <- 2*theta[6]*Q - theta[8]*P + theta[4]*RNA - theta[5]*P*(P-1)
result[3] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
- theta[6]*Q + .5*theta[5]*P*(P-1)
result[4] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
result
}
genemodelODE(theta, c(8,8,8,5))
theta_true <- c(0.1, 0.7, 0.35, 0.2, 0.1, 0.9, 0.3, 0.1)
genemodelODE <- function(theta,x) {
RNA <- x[1]
P <- x[2]
Q <- x[3]
DNA <- x[4]
result <- array(0,4)
result[1] <- theta[3] *DNA - theta[7]*RNA
result[2] <- 2*theta[6]*Q - theta[8]*P + theta[4]*RNA - theta[5]*P*(P-1)
result[3] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
- theta[6]*Q + .5*theta[5]*P*(P-1)
result[4] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
result
}
genemodelODE(theta, c(8,8,8,5))
genemodelODE(theta_true, c(8,8,8,5))
theta_true <- c(0.1, 0.7, 0.35, 0.2, 0.1, 0.9, 0.3, 0.1)
genemodelODE <- function(theta,x) {
RNA <- x[1]
P <- x[2]
Q <- x[3]
DNA <- x[4]
result <- array(0,4)
result[1] <- theta[3] *DNA - theta[7]*RNA
result[2] <- 2*theta[6]*Q - theta[8]*P + theta[4]*RNA - theta[5]*P*(P-1)
result[3] <- theta[2]*(K - DNA) - theta[1]*DNA*Q- theta[6]*Q + .5*theta[5]*P*(P-1)
result[4] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
result
}
genemodelODE(theta_true, c(8,8,8,5))
gene_data
gene_data <- read.csv("gene_autoreg_SDE_50.csv")
dim(gene_data)[1]
gene_data <- gene_data[seq(from = 0, to = dim(gene_data)[1], length.out = 101),]
times <- seq(0, 50, 101)
K <- 10
theta_true <- c(0.1, 0.7, 0.35, 0.2, 0.1, 0.9, 0.3, 0.1)
genemodelODE <- function(theta,x) {
RNA <- x[,1]
P <- x[,2]
Q <- x[,3]
DNA <- x[,4]
result <- array(0, c(nrow(x),ncol(x)))
result[,1] <- theta[3] *DNA - theta[7]*RNA
result[,2] <- 2*theta[6]*Q - theta[8]*P + theta[4]*RNA - theta[5]*P*(P-1)
result[,3] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
- theta[6]*Q + .5*theta[5]*P*(P-1)
result[,4] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
result
}
modelODE <- function(t, state, parameters) {
list(as.vector(genemodelODE(parameters, t(state))))
}
xtrue <- deSolve::ode(y = c(8,8,8,5), times = times, func = modelODE, parms = theta_true)
xtrue <- data.frame(xtrue)
compnames <- c("RNA", "P","Q", "DNA")
ylim_lower <- c(0, 1,1,1)
ylim_upper <- c(12, 17,12,10)
par(mfrow=c(2,2), mar=c(4,2,1,1))
for (i in 1:4) {
plot(times, gene_data[,i+1],xlab="time", ylab="", ylim=c(ylim_lower[i], ylim_upper[i]))
mtext(compnames[i])
lines(times, xtrue[,i + 1], lwd=1,col = 'red')
}
gene_data <- read.csv("gene_autoreg_SDE_50.csv")
dim(gene_data)[1]
gene_data <- gene_data[seq(from = 0, to = dim(gene_data)[1], length.out = 101),]
times <- gene_data[,1]
K <- 10
theta_true <- c(0.1, 0.7, 0.35, 0.2, 0.1, 0.9, 0.3, 0.1)
genemodelODE <- function(theta,x) {
RNA <- x[,1]
P <- x[,2]
Q <- x[,3]
DNA <- x[,4]
result <- array(0, c(nrow(x),ncol(x)))
result[,1] <- theta[3] *DNA - theta[7]*RNA
result[,2] <- 2*theta[6]*Q - theta[8]*P + theta[4]*RNA - theta[5]*P*(P-1)
result[,3] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
- theta[6]*Q + .5*theta[5]*P*(P-1)
result[,4] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
result
}
modelODE <- function(t, state, parameters) {
list(as.vector(genemodelODE(parameters, t(state))))
}
xtrue <- deSolve::ode(y = c(8,8,8,5), times = times, func = modelODE, parms = theta_true)
xtrue <- data.frame(xtrue)
compnames <- c("RNA", "P","Q", "DNA")
ylim_lower <- c(0, 1,1,1)
ylim_upper <- c(12, 17,12,10)
par(mfrow=c(2,2), mar=c(4,2,1,1))
for (i in 1:4) {
plot(times, gene_data[,i+1],xlab="time", ylab="", ylim=c(ylim_lower[i], ylim_upper[i]))
mtext(compnames[i])
lines(times, xtrue[,i + 1], lwd=1,col = 'red')
}
gene_data <- read.csv("gene_autoreg_SDE_50.csv")
dim(gene_data)[1]
gene_data <- gene_data[seq(from = 0, to = dim(gene_data)[1], length.out = 101),]
times <- gene_data[,1]
K <- 10
theta_true <- c(0.1, 0.7, 0.35, 0.2, 0.1, 0.9, 0.3, 0.1)
genemodelODE <- function(theta,x) {
RNA <- x[,1]
P <- x[,2]
Q <- x[,3]
DNA <- x[,4]
result <- array(0, c(nrow(x),ncol(x)))
result[,1] <- theta[3] *DNA - theta[7]*RNA
result[,2] <- 2*theta[6]*Q - theta[8]*P + theta[4]*RNA - theta[5]*P*(P-1)
result[,3] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
- theta[6]*Q + .5*theta[5]*P*(P-1)
result[,4] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
result
}
modelODE <- function(t, state, parameters) {
list(as.vector(genemodelODE(parameters, t(state))))
}
xtrue <- deSolve::ode(y = c(8,8,8,5), times = times, func = modelODE, parms = theta_true)
xtrue <- data.frame(xtrue)
compnames <- c("RNA", "P","Q", "DNA")
ylim_lower <- c(0, 1,1,1)
ylim_upper <- c(12, 17,12,10)
par(mfrow=c(2,2), mar=c(4,2,1,1))
for (i in 1:4) {
plot(times, gene_data[,i+1],xlab="time", ylab="", ylim=c(ylim_lower[i], ylim_upper[i]))
mtext(compnames[i])
lines(times, xtrue[,i + 1], lwd=1,col = 'red')
}
K <- 10
theta_true <- c(0.1, 0.7, 0.35, 0.2, 0.1, 0.9, 0.3, 0.1)
genemodelODE <- function(theta,x) {
RNA <- x[,1]
P <- x[,2]
Q <- x[,3]
DNA <- x[,4]
result <- array(0, c(nrow(x),ncol(x)))
result[,1] <- theta[3] *DNA - theta[7]*RNA
result[,2] <- 2*theta[6]*Q - theta[8]*P + theta[4]*RNA - theta[5]*P*(P-1)
result[,3] <- theta[2]*(K - DNA) - theta[1]*DNA*Q- theta[6]*Q + .5*theta[5]*P*(P-1)
result[,4] <- theta[2]*(K - DNA) - theta[1]*DNA*Q
result
}
modelODE <- function(t, state, parameters) {
list(as.vector(genemodelODE(parameters, t(state))))
}
xtrue <- deSolve::ode(y = c(8,8,8,5), times = times, func = modelODE, parms = theta_true)
xtrue <- data.frame(xtrue)
compnames <- c("RNA", "P","Q", "DNA")
ylim_lower <- c(0, 1,1,1)
ylim_upper <- c(12, 17,12,10)
par(mfrow=c(2,2), mar=c(4,2,1,1))
for (i in 1:4) {
plot(times, gene_data[,i+1],xlab="time", ylab="", ylim=c(ylim_lower[i], ylim_upper[i]))
mtext(compnames[i])
lines(times, xtrue[,i + 1], lwd=1,col = 'red')
}
